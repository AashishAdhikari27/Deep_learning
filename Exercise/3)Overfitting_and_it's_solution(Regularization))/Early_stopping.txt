 
 # Early stopping :-
 
 ---> Stop training when a monitored metric has stopped improving.
  
  
  # Syntax :-
  
  ---> from tensorflow.keras.callbacks import EarlyStopping

        early_stopping = EarlyStopping(
            monitor='val_loss',      # Metric to monitor (e.g., 'val_loss', 'val_accuracy')
            min_delta=0,             # Minimum change in monitored quantity to be considered an improvement
            patience=0,              # Number of epochs with no improvement after which training will stop
            verbose=0,               # Verbosity mode (0: silent, 1: update messages)
            mode='auto',             # Direction of improvement ('auto', 'min', 'max')
            baseline=None,           # Baseline value for the monitored quantity
            restore_best_weights=False  # Whether to restore model weights to the point of best monitored quantity
        )
        
        
   # Example:- 
   
   ---> callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)
         # This callback will stop the training when there is no improvement in
         # the loss for three consecutive epochs.
         model = tf.keras.models.Sequential([tf.keras.layers.Dense(10)])
         model.compile(tf.keras.optimizers.SGD(), loss='mse')
         history = model.fit(np.arange(100).reshape(5, 20), np.zeros(5),
        ...                     epochs=10, batch_size=1, callbacks=[callback],
        ...                     verbose=0)
        >>> len(history.history['loss'])  # Only 4 epochs are run.

